-- Sequences
CREATE SEQUENCE CPRS_PROMO_SEQ        START WITH 1 INCREMENT BY 1 CACHE 1000 NOCYCLE;
CREATE SEQUENCE CPRS_APPLICATION_SEQ  START WITH 1 INCREMENT BY 1 CACHE 1000 NOCYCLE;
CREATE SEQUENCE CPRS_OUTBOX_SEQ       START WITH 1 INCREMENT BY 1 CACHE 1000 NOCYCLE;
CREATE SEQUENCE CPRS_PROC_SEQ         START WITH 1 INCREMENT BY 1 CACHE 1000 NOCYCLE;

-- Tables
-- Promotions master data. UUIDs could be stored as RAW(16); using VARCHAR2(36) for simplicity
CREATE TABLE CPRS_PROMOTIONS (
	PROMO_ID          VARCHAR2(36)    PRIMARY KEY,
	NAME              VARCHAR2(150)   NOT NULL,
	DESCRIPTION       CLOB,
	START_DATE        TIMESTAMP(6) WITH TIME ZONE NOT NULL,
	EXPIRY_DATE       TIMESTAMP(6) WITH TIME ZONE NOT NULL,
	ELIGIBILITY_RULES CLOB            NOT NULL, -- JSON content
	REWARD_FORMULA    CLOB            NOT NULL, -- JSON content
	STATUS            VARCHAR2(20)    NOT NULL CHECK (STATUS IN ('ACTIVE','INACTIVE','EXPIRED')),
	CREATED_AT        TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
	UPDATED_AT        TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL
);

-- Applications of promotions to transactions
CREATE TABLE CPRS_PROMO_APPLICATIONS (
	APPLICATION_ID    VARCHAR2(36)    PRIMARY KEY,
	PROMO_ID          VARCHAR2(36)    NOT NULL,
	TRANSACTION_ID    VARCHAR2(100)   NOT NULL,
	ISSUER_ID         VARCHAR2(100)   NOT NULL,
	MERCHANT_ID       VARCHAR2(100),
	INITIATED_AT      TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
	POSTED_AT         TIMESTAMP(6) WITH TIME ZONE,
	CASHBACK_AMOUNT   NUMBER(20,2)    DEFAULT 0 NOT NULL,
	STATUS            VARCHAR2(20)    NOT NULL CHECK (STATUS IN ('APPLIED','FAILED','REVERSED')),
	IDEMPOTENCY_KEY   VARCHAR2(200)   NOT NULL,
	APPLIED_AT        TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
	REASON            CLOB,
	CREATED_AT        TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
	UPDATED_AT        TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
	CONSTRAINT FK_CPRS_APP_PROMO FOREIGN KEY (PROMO_ID) REFERENCES CPRS_PROMOTIONS(PROMO_ID)
);

-- Outbox & processed events (pattern consistent with other services)
CREATE TABLE CPRS_OUTBOX_EVENTS (
	EVENT_ID     NUMBER(19)       PRIMARY KEY,
	EVENT_TYPE   VARCHAR2(100)    NOT NULL,
	AGGREGATE_ID VARCHAR2(100),
	PAYLOAD      CLOB             NOT NULL,
	STATUS       VARCHAR2(20)     DEFAULT 'PENDING' NOT NULL CHECK (STATUS IN ('PENDING','PUBLISHED','FAILED')),
	CREATED_AT   TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
	PUBLISHED_AT TIMESTAMP(6) WITH TIME ZONE
);

CREATE TABLE CPRS_PROCESSED_EVENTS (
	EVENT_ID     VARCHAR2(100) PRIMARY KEY,
	PAYLOAD_HASH VARCHAR2(128),
	STATUS       VARCHAR2(20),
	PROCESSED_AT TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL
);

-- Triggers (UUID generation done in app layer; sequences only for numeric IDs like outbox if needed)
CREATE OR REPLACE TRIGGER TRG_CPRS_PROMOTIONS_UPD
BEFORE UPDATE ON CPRS_PROMOTIONS
FOR EACH ROW
BEGIN
	:NEW.UPDATED_AT := SYSTIMESTAMP;
END;
/

CREATE OR REPLACE TRIGGER TRG_CPRS_PROMO_APPLICATIONS_UPD
BEFORE UPDATE ON CPRS_PROMO_APPLICATIONS
FOR EACH ROW
BEGIN
	:NEW.UPDATED_AT := SYSTIMESTAMP;
END;
/

CREATE OR REPLACE TRIGGER BI_CPRS_OUTBOX_EVENTS
BEFORE INSERT ON CPRS_OUTBOX_EVENTS
FOR EACH ROW
WHEN (NEW.EVENT_ID IS NULL)
BEGIN
	:NEW.EVENT_ID := CPRS_OUTBOX_SEQ.NEXTVAL;
END;
/

-- Indexes
CREATE UNIQUE INDEX UQ_CPRS_PROMO_APPL_IDEMPOTENCY ON CPRS_PROMO_APPLICATIONS(IDEMPOTENCY_KEY);
CREATE INDEX IDX_CPRS_PROMO_STATUS ON CPRS_PROMOTIONS(STATUS);
CREATE INDEX IDX_CPRS_PROMO_EXPIRY ON CPRS_PROMOTIONS(EXPIRY_DATE);
CREATE INDEX IDX_CPRS_APP_PROMO_STATUS ON CPRS_PROMO_APPLICATIONS(PROMO_ID, STATUS);
CREATE INDEX IDX_CPRS_APP_TXN ON CPRS_PROMO_APPLICATIONS(TRANSACTION_ID);
CREATE INDEX IDX_CPRS_OUTBOX_STATUS ON CPRS_OUTBOX_EVENTS(STATUS);
CREATE INDEX IDX_CPRS_OUTBOX_AGG_ID ON CPRS_OUTBOX_EVENTS(AGGREGATE_ID);
CREATE INDEX IDX_CPRS_PROC_STATUS ON CPRS_PROCESSED_EVENTS(STATUS);
